-- TEMP DATABASE
	SQL Server comes installed with four system databases by default. They are master, model, msdb, and TempDB.
	TempDB is a database that has many functions within SQL Server, but it is rarely called explicitly.
	TempDB acts something like a page or swap file would at the operating system level. 
	If a SQL Server operation is too large to be completed in memory or if the initial memory grant for a query is too small, the operation can be moved to disk in TempDB.
	Another function of TempDB is to store temporary tables. Anyone who has created a temporary table in T-SQL using a pound or hash prefix (#) or the double pound/hash prefix (##) has created an object in TempDB as this is where those are stored.
	CREATE TABLE #MSSQLTips (RowID int);
	
	When a trigger is executing the insertion and deletion,  virtual tables are stored in TempDB.
	Any databases that use READ COMMITTED SNAPSHOT ISOLATION (RCSI) will have their row versioning information stored in TempDB.
	TempDB can also be called explicitly in a few ways. Tables can be generated in TempDB by referencing the database in a create statement. The code looks exactly like a normal DDL operation, but when run in TempDB the table is, by definition, a temporary table.
	CREATE TABLE TempDB.dbo.MSSQLTips(RowID int);
	
	TempDB is regenerated upon every start of the SQL Server instance. 
	Any objects that may have been created in TempDB during a previous session will not persist upon a service restart. 
	TempDB gets its initial object list from the model database which is generally going to be empty or nearly empty.
	
	Tempdb holds:
	Temporary user objects that are explicitly created. They include global or local temporary tables and indexes, temporary stored procedures, table variables, tables returned in table-valued functions, and cursors.

	Internal objects that the database engine creates. They include:
		Work tables to store intermediate results for spools, cursors, sorts, and temporary large object (LOB) storage.
		Work files for hash join or hash aggregate operations.
		Intermediate sort results for operations such as creating or rebuilding indexes (if SORT_IN_TEMPDB is specified), or certain GROUP BY, ORDER BY, or UNION queries.
	
	Version stores, which are collections of data pages that hold the data rows that support features for row versioning. There are two types: a common version store and an online-index-build version store. The version stores contain:
		Row versions that are generated by data modification transactions in a database that uses READ COMMITTED through row versioning isolation or snapshot isolation transactions.
		Row versions that are generated by data modification transactions for features, such as online index operations, Multiple Active Result Sets (MARS), and AFTER triggers.
	
	Operations within tempdb are minimally logged so that transactions can be rolled back. tempdb is re-created every time SQL Server is started so that the system always starts with a clean copy of the database. Temporary tables and stored procedures are dropped automatically on disconnect, and no connections are active when the system is shut down.

	tempdb never has anything to be saved from one session of SQL Server to another. Backup and restore operations are not allowed on tempdb.

--CTE COMMON TABLE EXPRESSION
https://www.essentialsql.com/introduction-common-table-expressions-ctes/

--TABLE VARIABLE
https://www.sqlshack.com/the-table-variable-in-sql-server/

EXPLAIN THESE ABOVE 3 POINTS WITH EXAMPLES

POT TABLE
-----------
SP

COMMA SEPRATED EMP NAME BASED ON DEPTNO


-----------------
SP

CREATE TABLE EMPDATA1 (
EMPNO INT IDENTITY PRIMARY KEY,
EMPNAME VARCHAR(20),
DEPTNO INT
)

CALL PROCEDURE AND PASS COMMA SEPRATED EMPNAME
INSERT ALL EMP IN A TABLE AS INDEPENDENT RECORD



DECLARE @NAMELIST VARCHAR(50) = 'SMITH,JONES,KING,FORD'

EXEC INSERTDATA 10, @NAMELIST

SELECT * FROM EMPDATA1
