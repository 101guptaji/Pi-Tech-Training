---------------------------------FUNCTIONS
USE NORTHWIND

--1. TAKE PRODUCTNAME AS PARAMETER AND RETURN UNITPRICE
SELECT * FROM Products

CREATE FUNCTION GET_UNITPRICE (@PNAME VARCHAR(20)) RETURNS NUMERIC(10,2)
AS
BEGIN
	DECLARE @PRICE NUMERIC(10,2)
	SELECT @PRICE=UNITPRICE FROM Products WHERE ProductName=@PNAME
	RETURN @PRICE
END

SELECT dbo.GET_UNITPRICE('CHAI') AS UNITPRICE

--2. TAKE PRODUCTNAME AS PARAMETER AND RETURN UNITSINSTOCK AND 
--UNINTSONORDER
CREATE FUNCTION GET_STOCK_ORDER (@PNAME VARCHAR(20)) RETURNS TABLE
AS
RETURN
	SELECT UnitsInStock,UnitsOnOrder  FROM Products WHERE ProductName=@PNAME

SELECT * FROM dbo.GET_STOCK_ORDER('Chang')

--3. TAKE POSTALCODE AS PARAMETER AND RETURN CUSTOMER NAME. IF POSTAL CODE IS 
--NOT VALID DISPLAY ERROR MESSAGE
SELECT * FROM Customers

ALTER FUNCTION GET_CUST_NAME (@PSCODE VARCHAR(10)) RETURNS VARCHAR(20)
AS
BEGIN
	DECLARE @CNAME VARCHAR(20)
	SELECT @CNAME=CompanyName FROM Customers WHERE PostalCode=@PSCODE
	--IF @@ROWCOUNT=0
		--SET @CNAME= 'INVALID POSTAL CODE'
	RETURN @CNAME
END

IF (SELECT dbo.GET_CUST_NAME('67000')) IS NULL
	RAISERROR('INVALID POSTAL CODE',16,1)
ELSE
	SELECT dbo.GET_CUST_NAME('67000')
	

--4. TAKE COUNTRY AS PARAMETER AND RETURN CITY AND POSTALCODE FOR A 
--CUSTOMERS
CREATE FUNCTION GET_CITY_PSCODE (@COUNTRY VARCHAR(20)) RETURNS TABLE
AS
RETURN
	SELECT City,PostalCode  FROM Customers WHERE Country=@COUNTRY

SELECT * FROM dbo.GET_CITY_PSCODE('FRANCE')

--5. TAKE EMPLOYEE FIRSTNAME AND LASTNAME AS PARAMETER AND RETURN ALL 
--CUSTOMERS COMPANY NAME, CONTACTNAME, CONTACTTILE
SELECT * FROM Employees
SELECT * FROM Customers

CREATE FUNCTION GET_COMPANY_CONTACT (@FNAME VARCHAR(20),@LNAME VARCHAR(20)) RETURNS TABLE
AS
RETURN
	SELECT CompanyName,ContactName,ContactTitle  FROM Customers WHERE CustomerID IN
	(SELECT CustomerID FROM Orders WHERE EmployeeID IN 
	(SELECT EmployeeID FROM Employees WHERE FirstName=@FNAME AND LastName=@LNAME))

SELECT * FROM dbo.GET_COMPANY_CONTACT('NANCY','DAVOLIO')

--6. TAKE YEAR AND EMPLOYEENAME AND DISPLAY AMOUNT OF ORDERS HANDLE BY THE 
--EMPLOYEE IN A YEAR (SUM OF QUANTITY)
SELECT * FROM ORDERS
SELECT * FROM "ORDER DETAILS"

DROP FUNCTION dbo.GET_ORDER_HANDLED_EMPLOYEE

CREATE FUNCTION GET_ORDER_HANDLED_EMPLOYEE (@YEAR VARCHAR(4), @ENAME VARCHAR(20)) RETURNS INT
AS
BEGIN
	DECLARE @COUNT INT
	SELECT @COUNT=SUM(OD.QUANTITY) FROM ORDERS O JOIN "Order Details" OD ON O.OrderID=OD.OrderID WHERE YEAR(OrderDate)=@YEAR AND EmployeeID IN (SELECT EmployeeID FROM Employees WHERE FirstName+' '+LastName=@ENAME) 
	RETURN @COUNT
END 

SELECT dbo.GET_ORDER_HANDLED_EMPLOYEE('1996','ROBERT KING') AS "AMOUNT OF ORDERS"

--7. TAKE YEAR AND MONTH AS PARAMETER AND RETURN NO OF ORDERS SHIPPED IN THE 
--GIVEN MONTH
CREATE FUNCTION GET_SHIPPED_ORDERS (@YEAR VARCHAR(4), @MONTH VARCHAR(2)) RETURNS INT AS
BEGIN
	DECLARE @COUNT INT
	SELECT @COUNT=COUNT(ORDERID) FROM Orders WHERE YEAR(ShippedDate) =@YEAR AND MONTH(ShippedDate)=@MONTH
	RETURN @COUNT
END

SELECT DBO.GET_SHIPPED_ORDERS('1996','8') AS "NO OF ORDERS SHIPPED"

--8. TAKE PRODUCTNAME AS PARAMTER AND RETURN TOTLA UNITS OF ORDER PLACED FOR 
--THE PRODUCT (SUM(ORDERED QUANTITY)
--Hint: use Products and [Order Details] table
SELECT * FROM Products

CREATE FUNCTION GET_ORDERED_PRODUCT (@PNAME VARCHAR(20)) RETURNS INT
AS
BEGIN
	DECLARE @COUNT INT
	SELECT @COUNT=SUM(OD.QUANTITY) FROM "Order Details" OD
	WHERE ProductID IN (SELECT ProductID FROM Products WHERE ProductName=@PNAME)
	RETURN @COUNT
END

SELECT dbo.GET_ORDERED_PRODUCT('TOFU') AS "TOTLA UNITS OF ORDER PLACED"

--9. TAKE ORDERID AS PARAMETER AND RETURN TOTAL UNITS OF ORDER PLACE FOR THE 
--ORDERID
SELECT * FROM Orders
SELECT * FROM "ORDER DETAILS"

CREATE FUNCTION GET_ORDERED_ORDERID (@OID INT) RETURNS INT
AS
BEGIN
	DECLARE @COUNT INT
	SELECT @COUNT=SUM(OD.QUANTITY) FROM "Order Details" OD WHERE OrderID=@OID
	RETURN @COUNT
END

SELECT dbo.GET_ORDERED_ORDERID('10248') AS "TOTLA UNITS OF ORDER PLACED"