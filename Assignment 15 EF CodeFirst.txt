https://www.entityframeworktutorial.net/code-first/code-based-migration-in-code-first.aspx
https://www.c-sharpcorner.com/article/fluent-api-in-code-first-approach/
1. Fluent API
Ans: Code First approach provides two methods to configure the domain classes of application: using Data Annotations and using the Fluent API. 
	Data Annotations only give us a subset of configuration options. Fluent API provides a full set of configuration options available in Code-First. 
	Fluent API provides more functionality for configuration than Data Annotations.
	To write Fluent API configurations, override the OnModelCreating() method of DbContext in a context class.
	This Method contain a parameter of DbModelBuilder class, this is the main class used for configuring the all domain classes. 
	DbModelBuilder class includes important properties and methods to configure.
	Fluent API configures the following aspect of a model in Entity Framework 6:
		Model-wide Configuration: Configures the default Schema, entities to be excluded in mapping, etc.
		Entity Configuration: Configures entity to table and relationship mappings e.g. PrimaryKey, Index, table name, one-to-one, one-to-many, many-to-many etc.
		Property Configuration: Configures property to column mappings e.g. column name, nullability, Foreignkey, data type, concurrency column, etc.

2. Code First Assignment
	•	Start new Project = “EFCodeFirstAssignment”

	•	Download dependency using NuGet Package Manager  (Entity Framework 6...)
		
	•	Build your project

	No primary key is auto generated number i.e. identity in MS SQL SERVER

	•	Create POCO (Entity) class

	Book Class
	BookID		int		PK
	BookName	string / varchar(20)	Required



	Member Class
	MemberID		int		PK
	MemberName		string/ varchar(20)		Required


	Review class
	ReviewID	int	PK no dbgenerated
	BookID	int	FK
	MemberID	int	FK
	ReviewText	string /varchar(50)

	•	Create Context class as BookDBContext Which allows to perform CRUD operation

	•	ADD DbSet property for all 3 classes

	•	Through constructor pass connection string

	•	Build code

	•	Enable-Migrations

	•	Add migration – 01____

	•	Update database (Check database and tables)


	•	Add POCO class as 

	Publisher class
	PublisherID		int		PK  no db generated
	PublisheName		string	varchar(20)	
	Country			string varchar(20)
	BookCollection		ICollection<Book>	

	•	Modify Book class 
	Add one more field
	Publisher		Publisher	FK

	•	Add Publisher class entry in DbContext DbSet<Publisher>

	•	Build code 

	•	Add migration 02____
	•	Update database   (check tables)

	•	Test data	In Main method
	o	Add one record for each table 
	•	Run your application (will add record in table) – (check table data)



3. Rounted event and its types



