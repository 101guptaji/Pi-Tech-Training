1. Difference between 
	Parse() method:
		The Parse() methods are available for all the primitive datatypes. It is the easiest way to convert from string to integer.
		The Parse methods are available for 16, 32, 64 bit signed integer types:
			Int16.Parse(String)
			Int32.Parse(string)
			Int64.Parse(string)
		Example:
			Int16.Parse("100"); // returns 100
			Int16.Parse("(100)", NumberStyles.AllowParentheses); // returns -100

			int.Parse("30,000", NumberStyles.AllowThousands, new CultureInfo("en-au"));// returns 30000
			int.Parse("$ 10000", NumberStyles.AllowCurrencySymbol); //returns 10000
			int.Parse("-100", NumberStyles.AllowLeadingSign); // returns -100
			int.Parse(" 100 ", NumberStyles.AllowLeadingWhite | NumberStyles.AllowTrailingWhite); // returns 100

			Int64.Parse("2147483649"); // returns 2147483649
			
		Invalid Conversion:
			int.Parse(null);//thows FormatException
			int.Parse("");//thows FormatException
			int.Parse("100.00"); // throws FormatException
			int.Parse( "100a"); //throws formatexception
			int.Parse(2147483649);//throws overflow exception use Int64.Parse()
			
	Convert class:
		Another way to convert string to integer is by using static Convert class. 
		The Convert class includes different methods which convert base data type to another base data type.
		The Convert.ToInt16() method returns the 16-bit integer e.g. short, the Convert.ToInt32() returns 32-bit integers e.g. int and the Convert.ToInt64() returns the 64-bit integer e.g. long.
		Pros:
			Converts from any data type to integer.
			Converts null to 0, so not throwing an exception.
		Cons:
			Input string must be valid number string, cannot include different numeric formats. Only works with valid integer string.
			Input string must be within the range of called IntXX method e.g. Int16, Int32, Int64.
			The input string cannot include parenthesis, comma, etc.
			Must use a different method for different integer ranges e.g. cannot use the Convert.ToInt16() for the integer string higher than "32767".
			
	TryParse() method;
			The TryParse() methods are available for all the primitive types to convert string to the calling data type.
			The TryParse() method converts the string representation of a number to its 16, 32, and 64-bit signed integer equivalent. 
			It returns boolean which indicates whether the conversion succeeded or failed and so it never throws exceptions.
			Method Overloads:
				bool Int32.TryParse(string s, out int result)
				bool Int32.TryParse(string s, NumberStyle style, IFormatProvider provider, out int result)
				
			Example:
				string numberStr = "123456";
				int number;

				bool isParsable = Int32.TryParse(numberStr, out number);

				if (isParsable)
					Console.WriteLine(number);
				else
					Console.WriteLine("Could not be parsed.");

	

2. Find out why there is question marks after string for toString() method in Object class: Virtual string? toString();
Ans:	? states that the return type of toString method can be string or null.

3. what is inner exception with example?
Ans:	The InnerException is a property of an exception. When there are series of exceptions, the most current exception can obtain the prior exception in the InnerException property.
	Let us say we have an exception inside a try block throwing an ArgumentException and the catch clause catches it and writes it to a file. 
	However, if the file path is not found, FileNotFoundException is thrown. Let's say that the outside try block catches this exception, but how about the actual ArgumentException that was thrown? Is it lost? No, the InnerException property contains the actual exception. 
	This is the reason for the existence of an InnerException property for any exception.
	
4. what is difference between constant and readonly variable?
Ans:	const fields has to be initialized while declaration only, while readonly fields can be initialized at declaration or in the constructor.
		const variables can declared in methods ,while readonly fields cannot be declared in methods.
		const fields cannot be used with static modifier, while readonly fields can be used with static modifier.
		A const field is a compile-time constant, the readonly field can be used for run time constants.

5. difference between string and StringBuilder?
Ans:	StringBuilder is used to represent a mutable string of characters. Mutable means the string which can be changed. 
		So String objects are immutable but StringBuilder is the mutable string type. It will not create a new modified instance of the current string object but do the modifications in the existing string object. 
		The complete functionality of StringBuilder is provided by StringBuilder class which is present in System.Text namespace.
		
6. Jagged array 
Ans:	A jagged array is an array whose elements are arrays, possibly of different sizes. A jagged array is sometimes called an "array of arrays."
		Example:
			int[][] jaggedArray = new int[3][];
			jaggedArray[0] = new int[5];
			jaggedArray[1] = new int[4];
			jaggedArray[2] = new int[2];
			
		Initialization:
			int[][] jaggedArray2 = new int[][]
				{
				new int[] { 1, 3, 5, 7, 9 },
				new int[] { 0, 2, 4, 6 },
				new int[] { 11, 22 }
				};
				
		Example-2:
			int[][,] jaggedArray4 = new int[3][,]
				{
					new int[,] { {1,3}, {5,7} },
					new int[,] { {0,2}, {4,6}, {8,10} },
					new int[,] { {11,22}, {99,88}, {0,9} }
				};
			System.Console.Write("{0}", jaggedArray4[0][1, 0]);

7. difference between ref and out?
Ans:	ref keyword:
			It is necessary the parameters should initialize before it pass to ref.	
			It is not necessary to initialize the value of a parameter before returning to the calling method.
			The passing of value through ref parameter is useful when the called method also need to change the value of passed parameter.	
			When ref keyword is used the data may pass in bi-directional.
		out keyword:
			It is not necessary to initialize parameters before it pass to out.
			It is necessary to initialize the value of a parameter before returning to the calling method.
			The declaring of parameter through out parameter is useful when a method return multiple values.
			When out keyword is used the data only passed in unidirectional.
			
8. swap number using generic class
Ans:	

9. what is the use of linkedlist, dictinory and sorted list, set

10. what is the use of these 3 interfaces:
	IEnumerable
	IList
	ICollection
Ans:	IEnumerable Interface:
			IEnumerable interface is used when we want to iterate among our classes using a foreach loop. 
			The IEnumerable interface has one method, GetEnumerator, that returns an IEnumerator interface that helps us to iterate among the class using the foreach loop. 
			The IEnumerator interface implements two the methods MoveNext() and Reset() and it also has one property called Current that returns the current element in the list.	
		
11.	indexer in C#.
Ans:	C# indexers are usually known as smart arrays. 
		A C# indexer is a class property that allows you to access a member variable of a class or struct using the features of an array. 
		In C#, indexers are created using this keyword. Indexers in C# are applicable on both classes and structs. 
 	
12.	what is finalize and dispose (IDisposable) method in C#.
Ans:	

13. SQL_Latin1_General_CP1_CI_AS

14. PRIYA JOINING AS DEVELOPER ON 01 JUN 2021 AND HER SALARY IS 125000. uSE UPDATE COMMAND TO DO SO.
	
15. CREATE TABLE TESTDATA
	ONLY ONE COLUMN TESTNO INT PRIMARY KEY AND IDENTITY COLUMN(1,1)
	INSERT DATA IN THIS TABLE
ANS:	SET INSERT_IDENTITY ON
		INSERT INTO TESTDATA(TESTNO) VALUES(2)
		SET INSERT_IDENTITY OFF

16. ORDER OF CLUASE IN SQL:
	FROM and JOIN s. The FROM clause, and subsequent JOIN s are first executed to determine the total working set of data that is being queried.
	WHERE.
	GROUP BY. 
	HAVING. 
	SELECT. 
	DISTINCT. 
	ORDER BY.
	LIMIT / OFFSET.
	
17. MAXIMUM NO SUB-QUERY CAN BE CREATED IN SQL?
ANS: 255
	
18. LINQ: Language Integrated Query
	https://www.c-sharpcorner.com/UploadFile/72d20e/concept-of-linq-with-C-Sharp/
		Declaretive Syntax
		Method syntax