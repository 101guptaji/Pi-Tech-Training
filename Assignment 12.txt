Action
Action<T>

Func<T>

Predicate<T>

Signature of delegate and example of each delegate

	Whenever we use delegates, we have to declare a delegate then initialize it, then we call a method with a reference variable.
	 
	In order to get rid of all the first steps, we can directly use Func, Action, or Predicate delegates.
	The Func delegate takes zero, one or more input parameters, and returns a value (with its out parameter).
	Action takes zero, one or more input parameters, but does not return anything.
	Predicate is a special kind of Func. It represents a method that contains a set of criteria mostly defined inside an if condition and checks whether the passed parameter meets those criteria or not.
	It takes one input parameter and returns a boolean - true or false.

Difference between IENUMERABLE and IQueriable
	IEnumerable and IQueryable are used for data manipulation in LINQ from the database and collections.
	Differences

	IEnumerable
	IEnumerable exists in the System.Collections namespace.
	IEnumerable is suitable for querying data from in-memory collections like List, Array and so on.
	While querying data from the database, IEnumerable executes "select query" on the server-side, loads data in-memory on the client-side and then filters the data.	 
	IEnumerable is beneficial for LINQ to Object and LINQ to XML queries.
	
	IQueryable
	IQueryable exists in the System.Linq Namespace.
	IQueryable is suitable for querying data from out-memory (like remote database, service) collections.
	While querying data from a database, IQueryable executes a "select query" on server-side with all filters.
	IQueryable is beneficial for LINQ to SQL queries.
--------------------------------

Country - State ComboBox example